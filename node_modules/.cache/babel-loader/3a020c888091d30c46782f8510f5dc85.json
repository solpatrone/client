{"ast":null,"code":"import _toConsumableArray from\"/Users/erikamasini/henry/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"/Users/erikamasini/henry/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{GET_RESTOS,CREATE_CLIENT,CREATE_OWNER,GET_USERS,GET_RESTO_NAME}from\"../actions/types\";var initialState={clients:[],owners:[],user:{},restaurants:[],allRestaurants:[]};export default function rootReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case GET_RESTOS:return _objectSpread(_objectSpread({},state),{},{restaurants:action.payload,allRestaurants:action.payload});case GET_RESTO_NAME:return _objectSpread(_objectSpread({},state),{},{restaurants:action.payload});case CREATE_CLIENT:var exists=state.clients.find(function(u){return u.email===action.payload.email;});console.log(state.clients);if(!exists){return _objectSpread(_objectSpread({},state),{},{clients:[].concat(_toConsumableArray(state.clients),[action.payload])});}else{return _objectSpread({},state);}case CREATE_OWNER:var existsOwn=state.owners.find(function(u){return u.email===action.payload.email;});console.log(state.owners);if(!existsOwn){return _objectSpread(_objectSpread({},state),{},{owners:[].concat(_toConsumableArray(state.owners),[action.payload])});}else{return _objectSpread({},state);}case GET_USERS:return _objectSpread(_objectSpread({},state),{},{user:[].concat(_toConsumableArray(state),[action.payload])});default:return _objectSpread({},state);}}","map":{"version":3,"sources":["/Users/erikamasini/henry/client/src/reducer/index.js"],"names":["GET_RESTOS","CREATE_CLIENT","CREATE_OWNER","GET_USERS","GET_RESTO_NAME","initialState","clients","owners","user","restaurants","allRestaurants","rootReducer","state","action","type","payload","exists","find","u","email","console","log","existsOwn"],"mappings":"iPAAA,OACEA,UADF,CAEEC,aAFF,CAGEC,YAHF,CAIEC,SAJF,CAKEC,cALF,KAMO,kBANP,CAQA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,OAAO,CAAE,EADU,CAEnBC,MAAM,CAAE,EAFW,CAGnBC,IAAI,CAAE,EAHa,CAInBC,WAAW,CAAE,EAJM,CAKnBC,cAAc,CAAE,EALG,CAArB,CAQA,cAAe,SAASC,CAAAA,WAAT,EAAmD,IAA9BC,CAAAA,KAA8B,2DAAtBP,YAAsB,IAARQ,CAAAA,MAAQ,2CAChE,OAAQA,MAAM,CAACC,IAAf,EACE,IAAKd,CAAAA,UAAL,CACE,sCACKY,KADL,MAEEH,WAAW,CAAEI,MAAM,CAACE,OAFtB,CAGEL,cAAc,CAAEG,MAAM,CAACE,OAHzB,GAKF,IAAKX,CAAAA,cAAL,CACE,sCACKQ,KADL,MAEEH,WAAW,CAAEI,MAAM,CAACE,OAFtB,GAIF,IAAKd,CAAAA,aAAL,CACE,GAAIe,CAAAA,MAAM,CAAGJ,KAAK,CAACN,OAAN,CAAcW,IAAd,CAAmB,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACC,KAAF,GAAYN,MAAM,CAACE,OAAP,CAAeI,KAAlC,EAAnB,CAAb,CACAC,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACN,OAAlB,EACA,GAAI,CAACU,MAAL,CAAa,CACX,sCACKJ,KADL,MAEEN,OAAO,8BAAMM,KAAK,CAACN,OAAZ,GAAqBO,MAAM,CAACE,OAA5B,EAFT,GAID,CALD,IAKO,CACL,wBACKH,KADL,EAGD,CACH,IAAKV,CAAAA,YAAL,CACE,GAAIoB,CAAAA,SAAS,CAAGV,KAAK,CAACL,MAAN,CAAaU,IAAb,CACd,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACC,KAAF,GAAYN,MAAM,CAACE,OAAP,CAAeI,KAAlC,EADc,CAAhB,CAGAC,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACL,MAAlB,EACA,GAAI,CAACe,SAAL,CAAgB,CACd,sCACKV,KADL,MAEEL,MAAM,8BAAMK,KAAK,CAACL,MAAZ,GAAoBM,MAAM,CAACE,OAA3B,EAFR,GAID,CALD,IAKO,CACL,wBACKH,KADL,EAGD,CACH,IAAKT,CAAAA,SAAL,CACE,sCACKS,KADL,MAEEJ,IAAI,8BAAMI,KAAN,GAAaC,MAAM,CAACE,OAApB,EAFN,GAKF,QACE,wBAAYH,KAAZ,EA/CJ,CAiDD","sourcesContent":["import {\n  GET_RESTOS,\n  CREATE_CLIENT,\n  CREATE_OWNER,\n  GET_USERS,\n  GET_RESTO_NAME,\n} from \"../actions/types\";\n\nconst initialState = {\n  clients: [],\n  owners: [],\n  user: {},\n  restaurants: [],\n  allRestaurants: [],\n};\n\nexport default function rootReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_RESTOS:\n      return {\n        ...state,\n        restaurants: action.payload,\n        allRestaurants: action.payload,\n      };\n    case GET_RESTO_NAME:\n      return {\n        ...state,\n        restaurants: action.payload,\n      };\n    case CREATE_CLIENT:\n      let exists = state.clients.find((u) => u.email === action.payload.email);\n      console.log(state.clients);\n      if (!exists) {\n        return {\n          ...state,\n          clients: [...state.clients, action.payload],\n        };\n      } else {\n        return {\n          ...state,\n        };\n      }\n    case CREATE_OWNER:\n      let existsOwn = state.owners.find(\n        (u) => u.email === action.payload.email\n      );\n      console.log(state.owners);\n      if (!existsOwn) {\n        return {\n          ...state,\n          owners: [...state.owners, action.payload],\n        };\n      } else {\n        return {\n          ...state,\n        };\n      }\n    case GET_USERS:\n      return {\n        ...state,\n        user: [...state, action.payload],\n      };\n\n    default:\n      return { ...state };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}