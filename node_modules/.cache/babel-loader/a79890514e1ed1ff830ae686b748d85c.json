{"ast":null,"code":"// import { useDispatch, useSelector } from \"react-redux\";\n// import React, { useState } from \"react\";\n// import { useHistory } from \"react-router-dom\";\n// import Select from \"react-select\";\n// import \"./Registerowner.css\";\n// import { createOwner } from \"../../actions\";\n// // export default function RegisterOwner() {\n// //   const history = useHistory();\n// //   let dispatch = useDispatch();\n// //   let neighborhoodOptions = [\n// //     {name: 'palermo', label: 'Palermo', value:'palermo'},\n// //     {name: 'belgrano', label: 'Belgrano', value:'belgrano'},\n// //     {name: 'recoleta', label: 'Recoleta', value:'Recoleta'}\n// //   ]\n// //   let priceOptions = [\n// //     {name: 'one', label: '$', value:'one'},\n// //     {name: 'two', label: '$$', value:'two'},\n// //     {name: 'three', label: '$$$', value:'three'},\n// //     {name: 'four', label: '$$$$', value:'four'},\n// //     {name: 'five', label: '$$$$$', value:'five'}\n// //   ]\n// //   let foodTypes = [\n// //     {name: \"type1\", label: \"Vegana\", value: \"type1\"},\n// //     {name: \"type2\", label: \"Vegetariana\", value: \"type2\"},\n// //     {name: \"type3\", label: \"Italiana\", value: \"type3\"}\n// //   ]\n// //   //owner object\n// //   const [owner, setOwner] = useState({\n// //     restoName: \"\",\n// //     street: \"\",\n// //     number: 0,\n// //     price: \"\",\n// //     neighborhood: \"\",\n// //     types: [],\n// //     description: \"\",\n// //     images: [],\n// //   });\n// //ver para inputs de solo letras ej: nombre\n// let onlyLetters = (e) => {\n//   if (!/[a-zA-Z\\s]/.test(e.key)) {\n//     e.preventDefault();\n//   }\n// };\n// // en el input poner: onKeyPress={onlyLetters}\n// //ver para numero de direccion\n// let onlyNumbers = (e) => {\n//   if (!/[0-9]/.test(e.key)) {\n//     e.preventDefault();\n//   }\n// };\n// // en el input poner: onKeyPress={onlyLetters}\n// //error objects\n// const [errors, setError] = useState({ hasErrors: true });\n//   //flag for submit\n//   const [isSubmit, setIsSubmit] = useState(false);\n//   function handleChange(e) {\n//     setOwner((prev) => ({ ...prev, [e.target.name]: e.target.value }));\n//     setError(validate(owner));\n//   }\n//   function handleNeighborhood(e) {\n//     setOwner((prev) => ({ ...prev, neighborhood: e  }));\n//   }\n//   function handlePrice(e) {\n//      setOwner((prev) => ({ ...prev, price: e  }));\n//   }\n//   function handleTypes(e){\n//     setOwner((prev)=> ({...prev, types: e}))\n//   }\n//   function handleSubmit(e) {\n//     e.preventDefault();\n//     if (!validate(owner).hasErrors) {\n//       dispatch(createOwner(owner))\n//       setIsSubmit(true);\n//       setOwner({\n//         restoName: \"\",\n//         street: \"\",\n//         number: 0,\n//         price: \"\",\n//         neighborhood: \"\",\n//         types: [],\n//         description: \"\",\n//         images: [],\n//       })\n//   }\n//   }\n//   //validate function for inputs\n//   function validate(owner) {\n//     const errors = { hasErrors: false };\n//     console.log(\"input\", owner)\n//     const regexEmail = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\n//     const regexPassword =\n//       /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,15}$/gm;\n//     //   if (!owner.username) {\n//     //     errors.username = `El nombre es requerido`;\n//     //     errors.hasErrors = true;\n//     // } else if (!/^[a-zA-Z\\s]{5,20}$/.test(owner.username)) {\n//     //     errors.username = `El nombre debe ser letras entre 5 y 20 caracteres`;\n//     //     errors.hasErrors = true;\n//     // }\n//       //  if (!owner.email) {\n//       //       errors.email = `El email es requerido`;\n//       //       errors.hasErrors = true;\n//       //   }else if (!regexEmail.test(owner.email)) {\n//       //     errors.email = `El email debe ser una dirección válida`;\n//       //     errors.hasErrors = true;\n//       // } // como esta planteado en client no va a poder registrarse si es mail empresa. Podemos cambiarlo alla\n//       // if (!owner.password) {\n//       //   errors.password = \"La contraseña es requerida\";\n//       //   errors.hasErrors = true;\n//       // } else if (!regexPassword.test(owner.password)) {\n//       //   errors.password =\n//       //   \"La contrseña debe incluir: \\n Entre 8 y 15 carateres \\n Mayúsculas y minúsculas \\n Números\";\n//       //     errors.hasErrors = true;\n//       //   }\n//     if (!owner.restoName) {\n//       errors.restoName = \"Debes ingresar el nombre de tu restaurante\";\n//       errors.hasErrors = true;\n//     }\n//     if (!owner.street) {\n//       errors.street = \"Ingrese una calle\";\n//       errors.hasErrors = true;\n//     }\n//     if (!owner.number) {\n//       errors.number = \"El número debe ser mayor a cero\";\n//       errors.hasErrors = true;\n//     }\n//     if (owner.description.length < 0 || owner.description.length > 200) {\n//       errors.description = \"La descripción debe tener menos de 200 caracteres\";\n//       errors.hasErrors = true;\n//     }\n//     return errors;\n//   }\n//   return isSubmit ? (\n//     <div>\n//       <h3>Se ha registrado correctamente</h3>\n//       <button onClick={() => history.push(\"/home\")}>Volver a Home</button>\n//     </div>\n//   ) : (\n//     <div>\n//       <div>\n//         <h2>Registra tu restaurante</h2>\n//       </div>\n//       <form onSubmit={(e) => handleSubmit(e)}>\n//         <div>\n//           <h3>Información del Restaurante</h3>\n//           <div>\n//             <label>Nombre del Restaurante</label>\n//             <input\n//               type=\"text\"\n//               name=\"restoName\"\n//               value={owner.restoName}\n//               placeholder=\"Ingrese el nombre del restaurante\"\n//               autoComplete=\"off\"\n//               onChange={(e) => handleChange(e)}\n//             />\n//             <p>{errors.restoName}</p>\n//           </div>\n//           <div>\n//             <label>Direccion</label>\n//             <input\n//               type=\"text\"\n//               name=\"street\"\n//               value={owner.street}\n//               placeholder=\"Ingrese la calle\"\n//               autoComplete=\"off\"\n//               onChange={(e) => handleChange(e)}\n//             />\n//              <p>{errors.street}</p>\n//             <input\n//               type=\"text\"\n//               name=\"number\"\n//               onKeyPress={onlyNumbers}\n//               value={owner.number}\n//               placeholder=\"Ingrese el número\"\n//               autoComplete=\"off\"\n//               onChange={(e) => handleChange(e)}\n//             />\n//             <p>{errors.number}</p>\n//             <label className='inputText'>Barrio</label>\n//           <Select className='selectOptions' options={neighborhoodOptions} value={owner.neighborhood} name={'neighborhood'} onChange={(e) => handleNeighborhood(e)} />\n//           </div>\n//           <div>\n//             <label className='inputText'>Precio</label>\n//           <Select className='selectOptions' options={priceOptions} value={owner.price} name={'price'} onChange={(e) => handlePrice(e)} />\n//           </div>\n//           <div>\n//           <label className='inputText'>Tipo de comida</label>\n//           <Select className='selectOptions' options={foodTypes} isMulti={true} value={owner.types} name={'types'} onChange={(e) => handleTypes(e)} />\n//           </div>\n//           <div>\n//             <textarea\n//               name=\"description\"\n//               value={owner.description}\n//               cols=\"30\"\n//               rows=\"10\"\n//               placeholder=\"Ingrese una breve descripción\"\n//               onChange={(e) => handleChange(e)}\n//             ></textarea>\n//             <p>{errors.description}</p>\n//           </div>\n//           {/* <div>\n//             <label >Imágenes</label>\n//             <input\n//               type=\"file\"\n//               placeholder=\"Cargue su imagen\"\n//               name=\"images\"\n//               value={owner.images}\n//               autoComplete=\"off\"\n//               multiple\n//               onChange={(e) => handleChange(e)}\n//             />\n//           </div> */}\n//         </div>\n//         <div>\n//            {/* <button>Registra tu restaurante!</button>  */}\n//            <button type={'submit'} disabled={errors.hasErrors}\n//            onSubmit={e => handleSubmit(e)}>Registra tu restaurante!</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// }","map":{"version":3,"sources":["/Users/erikamasini/henry/client/src/components/RegisterOwner/Registerowner.jsx"],"names":[],"mappingssourcesContent":["// import { useDispatch, useSelector } from \"react-redux\";\n// import React, { useState } from \"react\";\n// import { useHistory } from \"react-router-dom\";\n// import Select from \"react-select\";\n// import \"./Registerowner.css\";\n// import { createOwner } from \"../../actions\";\n\n// // export default function RegisterOwner() {\n// //   const history = useHistory();\n// //   let dispatch = useDispatch();\n\n// //   let neighborhoodOptions = [\n// //     {name: 'palermo', label: 'Palermo', value:'palermo'},\n// //     {name: 'belgrano', label: 'Belgrano', value:'belgrano'},\n// //     {name: 'recoleta', label: 'Recoleta', value:'Recoleta'}\n// //   ]\n\n// //   let priceOptions = [\n// //     {name: 'one', label: '$', value:'one'},\n// //     {name: 'two', label: '$$', value:'two'},\n// //     {name: 'three', label: '$$$', value:'three'},\n// //     {name: 'four', label: '$$$$', value:'four'},\n// //     {name: 'five', label: '$$$$$', value:'five'}\n\n// //   ]\n\n// //   let foodTypes = [\n// //     {name: \"type1\", label: \"Vegana\", value: \"type1\"},\n// //     {name: \"type2\", label: \"Vegetariana\", value: \"type2\"},\n// //     {name: \"type3\", label: \"Italiana\", value: \"type3\"}\n// //   ]\n\n// //   //owner object\n// //   const [owner, setOwner] = useState({\n// //     restoName: \"\",\n// //     street: \"\",\n// //     number: 0,\n// //     price: \"\",\n// //     neighborhood: \"\",\n// //     types: [],\n// //     description: \"\",\n// //     images: [],\n// //   });\n\n// //ver para inputs de solo letras ej: nombre\n// let onlyLetters = (e) => {\n//   if (!/[a-zA-Z\\s]/.test(e.key)) {\n//     e.preventDefault();\n//   }\n// };\n// // en el input poner: onKeyPress={onlyLetters}\n\n// //ver para numero de direccion\n// let onlyNumbers = (e) => {\n//   if (!/[0-9]/.test(e.key)) {\n//     e.preventDefault();\n//   }\n// };\n// // en el input poner: onKeyPress={onlyLetters}\n\n// //error objects\n// const [errors, setError] = useState({ hasErrors: true });\n\n//   //flag for submit\n//   const [isSubmit, setIsSubmit] = useState(false);\n\n//   function handleChange(e) {\n//     setOwner((prev) => ({ ...prev, [e.target.name]: e.target.value }));\n//     setError(validate(owner));\n//   }\n\n//   function handleNeighborhood(e) {\n//     setOwner((prev) => ({ ...prev, neighborhood: e  }));\n//   }\n\n//   function handlePrice(e) {\n//      setOwner((prev) => ({ ...prev, price: e  }));\n//   }\n\n//   function handleTypes(e){\n\n//     setOwner((prev)=> ({...prev, types: e}))\n//   }\n\n//   function handleSubmit(e) {\n//     e.preventDefault();\n//     if (!validate(owner).hasErrors) {\n//       dispatch(createOwner(owner))\n//       setIsSubmit(true);\n//       setOwner({\n//         restoName: \"\",\n//         street: \"\",\n//         number: 0,\n//         price: \"\",\n//         neighborhood: \"\",\n//         types: [],\n//         description: \"\",\n//         images: [],\n//       })\n//   }\n\n//   }\n\n//   //validate function for inputs\n//   function validate(owner) {\n//     const errors = { hasErrors: false };\n//     console.log(\"input\", owner)\n//     const regexEmail = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\n//     const regexPassword =\n//       /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,15}$/gm;\n\n//     //   if (!owner.username) {\n//     //     errors.username = `El nombre es requerido`;\n//     //     errors.hasErrors = true;\n//     // } else if (!/^[a-zA-Z\\s]{5,20}$/.test(owner.username)) {\n//     //     errors.username = `El nombre debe ser letras entre 5 y 20 caracteres`;\n//     //     errors.hasErrors = true;\n//     // }\n\n//       //  if (!owner.email) {\n//       //       errors.email = `El email es requerido`;\n//       //       errors.hasErrors = true;\n//       //   }else if (!regexEmail.test(owner.email)) {\n//       //     errors.email = `El email debe ser una dirección válida`;\n//       //     errors.hasErrors = true;\n\n//       // } // como esta planteado en client no va a poder registrarse si es mail empresa. Podemos cambiarlo alla\n\n//       // if (!owner.password) {\n//       //   errors.password = \"La contraseña es requerida\";\n//       //   errors.hasErrors = true;\n\n//       // } else if (!regexPassword.test(owner.password)) {\n//       //   errors.password =\n//       //   \"La contrseña debe incluir: \\n Entre 8 y 15 carateres \\n Mayúsculas y minúsculas \\n Números\";\n//       //     errors.hasErrors = true;\n//       //   }\n\n//     if (!owner.restoName) {\n//       errors.restoName = \"Debes ingresar el nombre de tu restaurante\";\n//       errors.hasErrors = true;\n//     }\n\n//     if (!owner.street) {\n//       errors.street = \"Ingrese una calle\";\n//       errors.hasErrors = true;\n//     }\n\n//     if (!owner.number) {\n//       errors.number = \"El número debe ser mayor a cero\";\n//       errors.hasErrors = true;\n//     }\n\n//     if (owner.description.length < 0 || owner.description.length > 200) {\n//       errors.description = \"La descripción debe tener menos de 200 caracteres\";\n//       errors.hasErrors = true;\n//     }\n\n//     return errors;\n//   }\n\n//   return isSubmit ? (\n//     <div>\n//       <h3>Se ha registrado correctamente</h3>\n//       <button onClick={() => history.push(\"/home\")}>Volver a Home</button>\n//     </div>\n//   ) : (\n//     <div>\n//       <div>\n//         <h2>Registra tu restaurante</h2>\n//       </div>\n//       <form onSubmit={(e) => handleSubmit(e)}>\n//         <div>\n//           <h3>Información del Restaurante</h3>\n//           <div>\n//             <label>Nombre del Restaurante</label>\n//             <input\n//               type=\"text\"\n//               name=\"restoName\"\n//               value={owner.restoName}\n//               placeholder=\"Ingrese el nombre del restaurante\"\n//               autoComplete=\"off\"\n//               onChange={(e) => handleChange(e)}\n//             />\n//             <p>{errors.restoName}</p>\n//           </div>\n//           <div>\n//             <label>Direccion</label>\n//             <input\n//               type=\"text\"\n//               name=\"street\"\n//               value={owner.street}\n//               placeholder=\"Ingrese la calle\"\n//               autoComplete=\"off\"\n//               onChange={(e) => handleChange(e)}\n//             />\n//              <p>{errors.street}</p>\n//             <input\n//               type=\"text\"\n//               name=\"number\"\n//               onKeyPress={onlyNumbers}\n//               value={owner.number}\n//               placeholder=\"Ingrese el número\"\n//               autoComplete=\"off\"\n//               onChange={(e) => handleChange(e)}\n//             />\n//             <p>{errors.number}</p>\n//             <label className='inputText'>Barrio</label>\n//           <Select className='selectOptions' options={neighborhoodOptions} value={owner.neighborhood} name={'neighborhood'} onChange={(e) => handleNeighborhood(e)} />\n//           </div>\n//           <div>\n\n//             <label className='inputText'>Precio</label>\n//           <Select className='selectOptions' options={priceOptions} value={owner.price} name={'price'} onChange={(e) => handlePrice(e)} />\n\n//           </div>\n//           <div>\n//           <label className='inputText'>Tipo de comida</label>\n//           <Select className='selectOptions' options={foodTypes} isMulti={true} value={owner.types} name={'types'} onChange={(e) => handleTypes(e)} />\n\n//           </div>\n//           <div>\n//             <textarea\n//               name=\"description\"\n//               value={owner.description}\n//               cols=\"30\"\n//               rows=\"10\"\n//               placeholder=\"Ingrese una breve descripción\"\n//               onChange={(e) => handleChange(e)}\n//             ></textarea>\n//             <p>{errors.description}</p>\n//           </div>\n//           {/* <div>\n//             <label >Imágenes</label>\n//             <input\n//               type=\"file\"\n//               placeholder=\"Cargue su imagen\"\n//               name=\"images\"\n//               value={owner.images}\n//               autoComplete=\"off\"\n//               multiple\n//               onChange={(e) => handleChange(e)}\n//             />\n//           </div> */}\n//         </div>\n//         <div>\n//            {/* <button>Registra tu restaurante!</button>  */}\n//            <button type={'submit'} disabled={errors.hasErrors}\n//            onSubmit={e => handleSubmit(e)}>Registra tu restaurante!</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}